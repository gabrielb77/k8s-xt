#1

cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

#2

stat /var/run/dockershim.sock &>/dev/null && echo "shim ok"
stat /run/containerd/containerd.sock &>/dev/null && echo "containerd ok"
stat /var/run/crio/crio.sock &>/dev/null && echo "crio ok"

#3

apt-get install -y apt-transport-https ca-certificates curl ethtool socat conntrack

#4
curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

#5
CNI_VERSION="v1.1.1"
mkdir -p /opt/cni/bin
curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-amd64-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz


#6

MyDir=$(pwd)
DOWNLOAD_DIR=/usr/local/bin
mkdir -p ${DOWNLOAD_DIR}

RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
cd ${DOWNLOAD_DIR}
curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${RELEASE}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
chmod +x {kubeadm,kubelet,kubectl}


curl -sSL "https://raw.githubusercontent.com/kubernetes/release/master/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service
mkdir -p /etc/systemd/system/kubelet.service.d
curl -sSL "https://raw.githubusercontent.com/kubernetes/release/master/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:${DOWNLOAD_DIR}:g" | tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf


cd ${MyDir}

systemctl enable --now kubelet

#7 network add-on calico

curl https://projectcalico.docs.tigera.io/manifests/calico-typha.yaml -o calico.yaml

#8 add /etc/hosts

### k8s
192.168.0.150 k8s-nodo01 control-plane-endpoint
192.168.0.151 k8s-nodo02
192.168.0.152 k8s-nodo03


#8

kubeadm init --pod-network-cidr=10.10.0.0/16 --control-plane-endpoint=control-plane-endpoint --upload-certs





#9

root@k8s-nodo01:~# kubeadm init --pod-network-cidr=10.10.0.0/16 --control-plane-endpoint=control-plane-endpoint --upload-certs
[init] Using Kubernetes version: v1.23.5
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [control-plane-endpoint k8s-nodo01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.0.150]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [k8s-nodo01 localhost] and IPs [192.168.0.150 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [k8s-nodo01 localhost] and IPs [192.168.0.150 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
[apiclient] All control plane components are healthy after 17.021620 seconds
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.23" in namespace kube-system with the configuration for the kubelets in the cluster
NOTE: The "kubelet-config-1.23" naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just "kubelet-config". Kubeadm upgrade will handle this transition transparently.
[upload-certs] Storing the certificates in Secret "kubeadm-certs" in the "kube-system" Namespace
[upload-certs] Using certificate key:
1643258e8b24fb73826cb8b90685046b084dd96963162e3b38107c942fa35070
[mark-control-plane] Marking the node k8s-nodo01 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node k8s-nodo01 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: wuka89.zukjw5zlihxzcwxl
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join control-plane-endpoint:6443 --token wuka89.zukjw5zlihxzcwxl \
	--discovery-token-ca-cert-hash sha256:dfc25fae4b07eee25530d0021f154bd5082281f048453350986461c996d931f4 \
	--control-plane --certificate-key 1643258e8b24fb73826cb8b90685046b084dd96963162e3b38107c942fa35070

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join control-plane-endpoint:6443 --token wuka89.zukjw5zlihxzcwxl \
	--discovery-token-ca-cert-hash sha256:dfc25fae4b07eee25530d0021f154bd5082281f048453350986461c996d931f4 



#10
Adminuser=k8s
useradd -m -s /bin/bash ${Adminuser}
mkdir -p /home/${Adminuser}/.kube
cp /etc/kubernetes/admin.conf /home/${Adminuser}/.kube/config
chown -R ${Adminuser} /home/${Adminuser}/.kube


#11 network add-on calico

curl https://projectcalico.docs.tigera.io/manifests/calico-typha.yaml -o /home/${Adminuser}/calico.yaml
# Cambiar valor de CALICO_IPV4POOL_CIDR con pod-network-cidr

sudo -u ${Adminuser} kubectl apply -f calico.yaml



#12

sudo -u ${Adminuser} kubectl taint nodes --all node-role.kubernetes.io/master-



#13

kubeadm join control-plane-endpoint:6443 --token wuka89.zukjw5zlihxzcwxl --discovery-token-ca-cert-hash sha256:dfc25fae4b07eee25530d0021f154bd5082281f048453350986461c996d931f4 --control-plane --certificate-key 1643258e8b24fb73826cb8b90685046b084dd96963162e3b38107c942fa35070


# Cleanup
kubeadm reset cleanup-node
rm -rf /etc/cni/net.d

